rules_version = '2';
// Phase 6: Security & Encryption
// - Messages and images are encrypted client-side with AES-256-GCM
// - User RSA public keys stored for key exchange
// - Strict validation of message structure and data types
// - Participant-only access to conversations and messages
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(participantList) {
      return request.auth.uid in participantList;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile and profiles of any user (for friend discovery)
      allow read: if isSignedIn();
      
      // Phase 6: Users can only write to their own profile
      // Validate required fields
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['email', 'displayName']) &&
        request.resource.data.email is string &&
        request.resource.data.displayName is string &&
        request.resource.data.displayName.size() > 0 &&
        request.resource.data.displayName.size() <= 50;
      
      // Phase 6: Allow updates including public key for E2EE
      // Phase 9.5: Allow encryption mode updates
      allow update: if isOwner(userId) &&
        request.resource.data.email == resource.data.email; // Cannot change email
      
      // Cannot delete user documents (handle via Cloud Function)
      allow delete: if false;
      
      // Phase 9: Encryption keys subcollection (account-level encryption)
      // Stores conversation encryption keys tied to user account
      match /encryptionKeys/{keyId} {
        // Users can only access their own encryption keys
        allow read, write: if isOwner(userId);
      }
    }
    
    // Friendships collection
    match /friendships/{friendshipId} {
      // Can read if you're one of the participants
      allow read: if isSignedIn() && 
        (request.auth.uid == resource.data.userId1 || 
         request.auth.uid == resource.data.userId2);
      
      // Can create friendship request
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.requestedBy;
      
      // Can update to accept/decline if you're the recipient
      allow update: if isSignedIn() && 
        (request.auth.uid == resource.data.userId1 || 
         request.auth.uid == resource.data.userId2);
      
      // Can delete if you're a participant
      allow delete: if isSignedIn() && 
        (request.auth.uid == resource.data.userId1 || 
         request.auth.uid == resource.data.userId2);
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Helper function to check if user is admin (Phase 4.5)
      function isAdmin() {
        return request.auth.uid in resource.data.get('admins', []);
      }
      
      // Helper function to check if update is just leaving the group
      function isLeavingGroup() {
        return request.auth.uid in resource.data.participants &&
               !(request.auth.uid in request.resource.data.participants) &&
               request.resource.data.participants.size() == resource.data.participants.size() - 1;
      }
      
      // Can read if you're a participant
      allow read: if isSignedIn() && 
        isParticipant(resource.data.participants);
      
      // Can create conversation if you're in participants list
      allow create: if isSignedIn() && 
        isParticipant(request.resource.data.participants);
      
      // Phase 4.5: Group-aware update rules
      // Phase 9.5: Allow participants to toggle encryption mode
      // Can update conversation if:
      // 1. You're an admin (for group settings, adding/removing members)
      // 2. You're leaving the group
      // 3. You're a participant (for lastMessage, read receipts, encryption mode, etc.)
      allow update: if isSignedIn() && (
        // Admin can modify all group settings
        (resource.data.get('type', 'direct') == 'group' && isAdmin()) ||
        // Anyone can leave a group
        (resource.data.get('type', 'direct') == 'group' && isLeavingGroup()) ||
        // Participants can update lastMessage, unreadCount, lastMessageTime, encryptionMode (but not participants list or admins)
        (isParticipant(resource.data.participants) && 
         request.resource.data.participants == resource.data.participants &&
         request.resource.data.get('admins', []) == resource.data.get('admins', []))
      );
      
      // Can delete conversation if you're a participant
      allow delete: if isSignedIn() && 
        isParticipant(resource.data.participants);
      
      // Messages subcollection
      match /messages/{messageId} {
        // Can read messages if you're a participant in the conversation
        allow read: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        // Phase 6: Enhanced message creation rules with validation
        // - Messages are encrypted client-side before storage
        // - Text field contains encrypted data (base64 encoded)
        // - Validates required fields and data types
        // - Allows empty text for media messages (images, voice, video)
        allow create: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants) &&
          (request.auth.uid == request.resource.data.senderId || 
           request.resource.data.senderId == "system") &&
          request.resource.data.text is string &&
          // Text can be empty for media messages
          (request.resource.data.text.size() > 0 || 
           request.resource.data.keys().hasAny(['mediaURL', 'mediaType'])) &&
          request.resource.data.text.size() <= 20000 && // Encrypted text is larger
          request.resource.data.senderId is string &&
          request.resource.data.senderName is string &&
          request.resource.data.timestamp is timestamp &&
          request.resource.data.status is string;
        
        // Phase 6: Can update message for status changes, reactions, and edits
        // Cannot change core message fields (senderId, conversationId)
        allow update: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants) &&
          request.resource.data.senderId == resource.data.senderId &&
          request.resource.data.conversationId == resource.data.conversationId;
        
        // Can delete own messages only (or system messages by admins)
        allow delete: if isSignedIn() && (
          request.auth.uid == resource.data.senderId ||
          (resource.data.senderId == "system" && 
           request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.get('admins', []))
        );
      }
      
      // Threads subcollection
      match /threads/{threadId} {
        allow read: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        allow create, update: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        allow delete: if false;
      }
      
      // Typing indicators subcollection
      match /typing/{userId} {
        // Can read typing status if you're a participant in the conversation
        allow read: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        // Can write your own typing status if you're a participant
        allow create, update, delete: if isSignedIn() && 
          isOwner(userId) &&
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
      }
      
      // Phase 9.5 Fix: Shared encryption keys subcollection
      match /metadata/{docId} {
        // Participants can read and write encryption keys
        allow read, write: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
      }
    }
    
    // Calls collection
    match /calls/{callId} {
      // Can read if you're caller or recipient
      allow read: if isSignedIn() && 
        (request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.recipientId);
      
      // Can create if you're the caller
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.callerId;
      
      // Can update if you're involved in the call (for signaling)
      allow update: if isSignedIn() && 
        (request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.recipientId);
      
      allow delete: if false;
    }
    
    // Action Items collection
    match /actionItems/{itemId} {
      // Can read if you're the assignee, creator, or if it's in your conversation
      allow read: if isSignedIn() && 
        (request.auth.uid == resource.data.get('assignedTo', null) || 
         request.auth.uid == resource.data.createdBy ||
         request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants);
      
      // Created by Cloud Functions only
      allow create: if false;
      
      // Can update if you're the assignee or creator (to mark complete or reassign)
      allow update: if isSignedIn() && 
        (request.auth.uid == resource.data.get('assignedTo', null) ||
         request.auth.uid == resource.data.createdBy);
      
      allow delete: if isOwner(resource.data.createdBy);
    }
    
    // Decisions collection
    match /decisions/{decisionId} {
      // Can read if you're a participant in the conversation
      allow read: if isSignedIn() && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      
      // Created by Cloud Functions only
      allow create: if false;
      
      allow update, delete: if false;
    }
    
    // Embeddings collection (for AI features)
    // Phase 9: Allow users to write unencrypted message text for AI assistant
    match /embeddings/{embeddingId} {
      // Users can write embeddings for their own messages (for AI features)
      // Embedding ID matches message ID, and senderId must match authenticated user
      allow create: if isSignedIn() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.messageId is string &&
        request.resource.data.conversationId is string &&
        request.resource.data.text is string &&
        request.resource.data.timestamp is timestamp;
      
      // Cloud Functions can read embeddings for AI processing
      // Users cannot read embeddings directly (privacy)
      allow read: if false;
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}


