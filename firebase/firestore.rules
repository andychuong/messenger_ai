rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(participantList) {
      return request.auth.uid in participantList;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile and profiles of any user (for friend discovery)
      allow read: if isSignedIn();
      
      // Users can only write to their own profile
      allow create, update: if isOwner(userId);
      
      // Cannot delete user documents (handle via Cloud Function)
      allow delete: if false;
    }
    
    // Friendships collection
    match /friendships/{friendshipId} {
      // Can read if you're one of the participants
      allow read: if isSignedIn() && 
        (request.auth.uid == resource.data.userId1 || 
         request.auth.uid == resource.data.userId2);
      
      // Can create friendship request
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.requestedBy;
      
      // Can update to accept/decline if you're the recipient
      allow update: if isSignedIn() && 
        (request.auth.uid == resource.data.userId1 || 
         request.auth.uid == resource.data.userId2);
      
      // Can delete if you're a participant
      allow delete: if isSignedIn() && 
        (request.auth.uid == resource.data.userId1 || 
         request.auth.uid == resource.data.userId2);
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Helper function to check if user is admin (Phase 4.5)
      function isAdmin() {
        return request.auth.uid in resource.data.get('admins', []);
      }
      
      // Helper function to check if update is just leaving the group
      function isLeavingGroup() {
        return request.auth.uid in resource.data.participants &&
               !(request.auth.uid in request.resource.data.participants) &&
               request.resource.data.participants.size() == resource.data.participants.size() - 1;
      }
      
      // Can read if you're a participant
      allow read: if isSignedIn() && 
        isParticipant(resource.data.participants);
      
      // Can create conversation if you're in participants list
      allow create: if isSignedIn() && 
        isParticipant(request.resource.data.participants);
      
      // Phase 4.5: Group-aware update rules
      // Can update conversation if:
      // 1. You're an admin (for group settings, adding/removing members)
      // 2. You're leaving the group
      // 3. You're a participant (for lastMessage, read receipts, etc.)
      allow update: if isSignedIn() && (
        // Admin can modify all group settings
        (resource.data.get('type', 'direct') == 'group' && isAdmin()) ||
        // Anyone can leave a group
        (resource.data.get('type', 'direct') == 'group' && isLeavingGroup()) ||
        // Participants can update lastMessage, unreadCount, lastMessageTime (but not participants list or admins)
        (isParticipant(resource.data.participants) && 
         request.resource.data.participants == resource.data.participants &&
         request.resource.data.get('admins', []) == resource.data.get('admins', []))
      );
      
      // Can delete conversation if you're a participant
      allow delete: if isSignedIn() && 
        isParticipant(resource.data.participants);
      
      // Messages subcollection
      match /messages/{messageId} {
        // Can read messages if you're a participant in the conversation
        allow read: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        // Phase 4.5: Can create message if you're a participant and the sender
        // OR if it's a system message (senderId == "system")
        allow create: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants) &&
          (request.auth.uid == request.resource.data.senderId || 
           request.resource.data.senderId == "system") &&
          request.resource.data.text.size() <= 10000; // Max 10k characters
        
        // Can update message for status changes and reactions
        allow update: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        // Can delete own messages only (or system messages by admins)
        allow delete: if isSignedIn() && (
          request.auth.uid == resource.data.senderId ||
          (resource.data.senderId == "system" && 
           request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.get('admins', []))
        );
      }
      
      // Threads subcollection
      match /threads/{threadId} {
        allow read: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        allow create, update: if isSignedIn() && 
          isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        
        allow delete: if false;
      }
    }
    
    // Calls collection
    match /calls/{callId} {
      // Can read if you're caller or recipient
      allow read: if isSignedIn() && 
        (request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.recipientId);
      
      // Can create if you're the caller
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.callerId;
      
      // Can update if you're involved in the call (for signaling)
      allow update: if isSignedIn() && 
        (request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.recipientId);
      
      allow delete: if false;
    }
    
    // Action Items collection
    match /actionItems/{itemId} {
      // Can read if you're the assignee or creator
      allow read: if isSignedIn() && 
        (request.auth.uid == resource.data.assignedTo || 
         request.auth.uid == resource.data.createdBy);
      
      // Created by Cloud Functions
      allow create: if false;
      
      // Can update if you're the assignee (to mark complete)
      allow update: if isSignedIn() && 
        request.auth.uid == resource.data.assignedTo;
      
      allow delete: if isOwner(resource.data.createdBy);
    }
    
    // Decisions collection
    match /decisions/{decisionId} {
      // Can read if you're a participant
      allow read: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
      
      // Created by Cloud Functions
      allow create: if false;
      
      allow update, delete: if false;
    }
    
    // Embeddings collection (for RAG)
    match /embeddings/{embeddingId} {
      // Only Cloud Functions can read/write embeddings
      allow read, write: if false;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}


